const allLocations = ['params', 'query', 'body', 'headers', 'cookies'];

function validateSchema(schema, req, loc, chainCreator) {
  Object.keys(schema)
    .map(param => ({ name, loc, cfg: schema[param] }))
    .map(locationMapper)
    .filter(locationFilter)
    .map(param => Object.assign(param, { chain: chainCreator(param) }))
    .forEach(setupChain);
}

function setupChain(param) {
  Object.keys(param.cfg)
    .map(name => ({ name, param, cfg: param.cfg[name] }))
    .filter(configMethodFilter)
    .filter(inexistentMethodFilter)
    .forEach(setValidator);
}

function setValidator({ name, cfg, param: { chain } }) {
  const options = [].concat(cfg.options);
  chain[name](...options);
  name !== 'optional' && chain.withMessage(cfg.errorMessage);
}

function configMethodFilter({ name, cfg }) {
  return ['in', 'errorMessage'].includes(name) || !cfg;
}

function inexistentMethodFilter({ name, param }) {
  if (typeof param.chain[name] !== 'function') {
    console.warn(`express-validator: a validator with name ${name} does not exist`);
    return false;
  }

  return true;
}

function locationMapper(param) {
  const loc = param.cfg.in || (param.loc === 'any' ? allLocations : param.loc);
  return Object.assign(param, { loc });
}

function locationFilter(param) {
  return allLocations.includes(param.loc);
}